# MVM

mvm, magenta virtual machine, is a bytecode interpreter for magenta

code is written assuming the following type sizes:
(u)char  ==  8 bits
(u)short == 16 bits
(u)int   == 32 bits
(u)long  == 64 bits

# basic specs

instruction set: 48 (- 8 noops = 40) instructions (0x00-2F)
byte width: 8/16/32/64bit
registers: 8 registers (A-H)
register widths: up to 64 bit
stack length: 2^16 bytes
call stack limit: 2^16 bytes

TODO: make stack/call stack pretty much infinite by not assigning 2^16 bytes at
      once but extending the stacks as needed

# bytecode header

magenta bytecode starts with the following file header, bytecode without this
header or a malformed version of it will not be executed.

0x 0A 4D 56 4D
   \n M  V  M

# memory and io

magenta bytecode is stack based. memory, to the program running inside the vm,
seems like it is allocated in a long continuous stretch, in actuality it is not.

devices ids are ascii strings that can be passed into the io bus to access their
read/write streams. if an input command for a device states that it "returns"
something, then it is most likely writing to its output buffer.

devices are mapped as specified by these offsets:
  +0-7   -> input buffer, inputs are sent to the cpu byte by byte until a null
            byte is sent. read behavior is as expected, returning the last
            written byte
  +8-F   -> output buffer, outputs are received from the cpu byte by byte. the
            last byte you should receive in response to an input is null. write
            behavior is unspecified.
  +10-13 -> output buffer length, length of the output buffer, how many bytes
            you can read from the buffer before it is empty.

io bus [device] [no id, can't be created] [always mapped at 0x01-0x14]
  [0x01XX..YY..] request to open a device
    XX states how many bytes (the first ..) will be used to specify a device
    before YY, similarly YY states the byte width of the memory address (the
    second ..) to allocate the device to. returns a 1 byte if operation was
    successful, otherwise a 0 byte if not.
  [0x02YY..] request to close a device
    YY states the byte width of the memory address (the ..) the device was
    allocated at. returns a 1 byte if operation was successful, otherwise a 0
    byte if not.
  [0x03AABB..] memory management
    AA -> 00 (length)
      write the bytewidth of the following data and amount of available memory
      to output buffer. BB and .. are null bytes. returns a 1 byte if operation
      was successful, otherwise a 0 byte if not.
    AA -> 01 (dealloc)
      BB is bytewidth, .. is the amount of bytes to deallocate, returns a 1 byte
      if operation was successful, otherwise a 0 byte if not.
    AA -> 02 (alloc)
      BB is bytewidth, .. is the amount of bytes to allocate, returns a 1 byte
      if operation was successful, otherwise a 0 byte if not.

TODO: instead of directly accessing files as devices, have an intermediary
      "storage" device. (will be represented as a mounted directory on host)
      there should also be a way of listing storage devices through the io bus

file [device] [device id "FILEM:.."]
  [id]
    M is the mode the file is opened in. can be Read, Write, Mod, or Append. mod
    is equivalent to a hybrid read/write, whilst append is like write only but
    appending to end of another file. write/mod/append all create files, but
    only write wipes files.
    .. can be either a path to a file on the hard drive or a special file.
  [special files]
    special files to allow bytecode interoperability between VMs running on dif-
    errent platforms, these include the following:
      STD (R: stdin file, W: stdout file, M: both)
      STDERR (R: unspecified, W: stderr file, M: unspecified)
  [output buffer]
    the output buffer allows you to read a file (or std stream) byte by byte, in
    files (behavior for write only/actively written to read only files is not
    specified) you can set the 'output buffer length' to change the focused byte
    in the output buffer, moving to different parts of the file, where 0 is EOF.
  [input buffer]
    the input buffer allows you to write to a file (or std stream) byte by byte,
    in files (behavior for read only/actively written to read only files is not
    specified) if the file is in Mod mode,

# instructions/opcodes

if you see sN, that means top element of stack - N, s0 is the top element, s1 is
the second-to-top element, etc. if an action is performed with a stack element
and it is not pushing, then it is usually popping.

if you see bN, that means program counter (currently on the instruction) plus 1
and N, so b0 is the byte directly after the instruction, b1 is the byte second
after the instruction, etc.

by default, all instructions work with 1 byte (8 bits) at once, using flags you
can set the memory width to 2 bytes (16 bit), 4 bytes (32 bit), 8 bytes (64 bit)
, and revert to the default 1 byte/8 bit memory width. when a flag is set, it is
kept until another flag is encountered. if something is pushed/popped from stack
it usually conforms to the set byte width.

if the push instruction runs into 0xFF it will substitute it for a null byte.

add/subtract instructions will overflow if memory width is too small, you should
consider using a memory width one above the width of the numbers you pushed to
A and B if you would like to avoid integer overflows.

 0x | opcode     | notes
----|------------|--------------------------------------------------------------
 00 | push       | push values to stack until null byte is reached
 01 | push bytes | following program bytes will be pushed to stack
 02 | destr. pop | destructive pop, remove from the stack without setting a reg.
 03 | convert #  | convert last memory width to ascii number string
 04 |            |
 05 |            |
 06 | add        | push answer of A + B to stack
 07 | subtract   | push answer of A - B to stack
----|------------|--------------------------------------------------------------
 08 | greater    | if A isn't greater than B then jump to s0
 09 | equal      | if A isn't equal to B then jump to s0
 0A |            |
 0B |            |
 0C | jump       | set program counter to s0
 0D | jmp to sub | set program counter to s0 and push old counter to call stack
 0E | exit       | exits the program
 0F | exit sub   | pop value from call stack and go to it
----|------------|--------------------------------------------------------------
 10 | pointr set | sets memory pointer location to byte(s) from stack
 11 |            |
 12 | pointr loc | push memory pointer location byte(s) to stack
 13 |            |
 14 | pointr get | push a byte width of memory data to stack
 15 |            |
 16 | write blck | pop byte(s) from stack and write block to pointer lcoations
!17 | write str  | pop bytes from stack to pointer locations until 0x00
!18 | write byte | pop byte(s) from stack and write byte(s) to pointer location
!19 | write str  | pop bytes from stack to pointer location until 0x00
----|------------|--------------------------------------------------------------
 1A | 1byte flag | set memory width to 8 bits
 1B | 2byte flag | set memory width to 16 bits
 1C | 4byte flag | set memory width to 32 bits
 1D | 8byte flag | set memory width to 64 bits
 1E | debug      | logs contents of stack until null byte is reached
 1F | no op      | no operation
----|------------|--------------------------------------------------------------
 20 | pop to A   | pop byte(s) from stack to A register
 21 | depop A    | pushes the value in A to stack without clearing A
 22 | pop to B   | pop byte(s) from stack to B register
 23 | depop B    | pushes the value in B to stack without clearing B
!24 | pop to C   | pop byte(s) from stack to C register
!25 | depop C    | pushes the value in C to stack without clearing C
!26 | pop to D   | pop byte(s) from stack to D register
!27 | depop D    | pushes the value in D to stack without clearing D
!28 | pop to E   | pop byte(s) from stack to E register
!29 | depop E    | pushes the value in E to stack without clearing E
!2A | pop to F   | pop byte(s) from stack to F register
!2B | depop F    | pushes the value in F to stack without clearing F
!2C | pop to G   | pop byte(s) from stack to G register
!2D | depop G    | pushes the value in G to stack without clearing G
!2E | pop to H   | pop byte(s) from stack to H register
!2F | depop H    | pushes the value in H to stack without clearing H
----|------------|--------------------------------------------------------------
 0x | opcode     | notes
